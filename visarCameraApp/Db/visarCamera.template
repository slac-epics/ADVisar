##
## visarCamera.template
## Template database file to control the features of a Visar camera.
##

include "ADBase.template"

###############################################
#  Overwrite AreaDetector records             #
###############################################

#########################################
#  ADAquireTime                         #
#########################################

record(mbbi, "$(P)$(R)AcquireTimeVisarUnits_RBV") {
    field(DESC, "Exposure time units getter")
    field(ZRST, "us")
    field(ZRVL, "0")
    field(ONST, "ms")
    field(ONVL, "1")
    field(TWST, "s")
    field(TWVL, "2")
    field(THST, "min")
    field(THVL, "3")
    field(PINI, "NO")
}

record(mbbo, "$(P)$(R)AcquireTimeVisarUnits") {
    field(DESC, "Exposure time units setter")
    field(ZRST, "us")
    field(ZRVL, "0")
    field(ONST, "ms")
    field(ONVL, "1")
    field(TWST, "s")
    field(TWVL, "2")
    field(THST, "min")
    field(THVL, "3")
    field(PINI, "NO")
    field(FLNK, "$(P)$(R)AcquireTimeVisar.PROC")
}

record(ai, "$(P)$(R)AcquireTimeVisar_RBV") {
    field(DESC, "Visar raw exposure time getter")
    field(DTYP, "stream")
    field(INP,  "@visar.proto get_exposure_time($(P)$(R)) $(PORTC) 0")
    field(SCAN, "Passive")
    field(PINI, "NO")
    field(FLNK, "$(P)$(R)AcquireTimeCalc_RBV.PROC")
}




record(ao, "$(P)$(R)AcquireTimeVisar") {
    field(DESC, "Visar raw exposure time setter")
    field(DTYP, "stream")
    field(OUT,  "@visar.proto set_exposure_time($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)AcquireTimeVisar_RBV")
    field(PINI, "NO")
}

record(calcout, "$(P)$(R)AcquireTimeCalc_RBV") {
    field(DESC, "Exposure time calc")
    field(INPA, "$(P)$(R)AcquireTimeVisar_RBV NPP MS")
    field(INPB, "$(P)$(R)AcquireTimeVisarUnits_RBV CPP MS")
    field(CALC, "(B==0)? A*0.000001 : (B==1)? A*0.001: (B==2)? A: (B==3)? A*60 : -1")
    field(PREC, "6" )
    field(EGU,  "sec")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)AcquireTime_RBV PP")
    field(PINI, "NO")
}


record(ao, "$(P)$(R)AcquireTime") {
    field(DESC, "Exposure in sec")
    field(FLNK, "$(P)$(R)AcquireTimeStream.PROC")
	field(EGU,  "sec")
	field(PINI, "NO")

}

record(ai, "$(P)$(R)AcquireTime_RBV") {
    field(DTYP, "Soft Channel" )
    field(INP,"$(P)$(R)AcquireTimeCalc_RBV CP MS")
    field(PINI, "NO")
    field(PREC,"6")
    field(EGU,  "sec")
    field(FLNK,  "$(P)$(R)AcquireTimeAsynCalc")
}

record(calcout, "$(P)$(R)AcquireTimeAsynCalc") {
    field(DESC, "Exposure time calc")
    field(INPA, "$(P)$(R)AcquireTime_RBV NPP MS")
    field(CALC, "A")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)AcquireTimeAsyn PP")
    field(EGU,  "sec")
    field(PINI, "NO")
}

record(ao, "$(P)$(R)AcquireTimeAsyn") {
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1)) VC_ACQ_TIME")
}


record(ao, "$(P)$(R)AcquireTimeStream") {
    field(DESC, "Exposure time StreamDevice")
    field(DTYP, "stream")
    field(OUT,  "@visar.proto set_exposure_time_s($(P)$(R)) $(PORTC) 0")
    field(EGU,  "sec")
    field(PINI, "NO")
    field(FLNK, "$(P)$(R)AcquireTimeVisar_RBV.PROC")
}

#########################################
#  ADGain                               #
#########################################

record(ai, "$(P)$(R)Gain_RBV") {
    field(DTYP, "Soft Channel" )
    field(INP,"$(P)$(R)IIGain_RBV CP MS")
    field(PINI, "NO")
    field(PREC,"0")
}

record(ao, "$(P)$(R)Gain") {
    field(DTYP, "Soft Channel" )
    field(OUT,"$(P)$(R)IIGain PP")
    field(PINI, "NO")
    field(PREC,"0")

}

record(longin, "$(P)$(R)IIGain_RBV") {
    field(DESC, "II-Gain getter")
    field(DTYP, "stream")
    field(INP,  "@visar.proto get_II_gain($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
    field(FLNK, "$(P)$(R)Gain_RBV PP")
    field(SCAN, "Passive")
}

record(longout, "$(P)$(R)IIGain") {
    field(DESC, "II-Gain setter")
    field(DTYP, "stream")
    field(OUT,  "@visar.proto set_II_gain($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)IIGain_RBV")
    field(PINI, "NO")
}

#########################################
#  ADImageMode                          #
#########################################

record(mbbi, "$(P)$(R)ImageMode_RBV") {
    field(DESC, "Trigger mode getter")
    field(DTYP, "stream")
    field(INP,  "@visar.proto get_image_mode($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Continuous")
    field(ONVL, "1")
    field(TWST, "")
    field(TWVL, "")
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)ImageMode") {
    field(DESC, "Trigger mode setter")
    field(DTYP, "stream")
    field(OUT,  "@visar.proto set_image_mode($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)ImageMode_RBV")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Continuous")
    field(ONVL, "1")
    field(TWST, "")
    field(TWVL, "")
    field(PINI, "NO")
}

#########################################
#  ADTriggerMode                        #
#########################################

record(mbbi, "$(P)$(R)TriggerMode_RBV") {
    field(DESC, "Trigger Mode getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_mode($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Focus")
    field(ZRVL, "0")
    field(ONST, "Operate")
    field(ONVL, "1")
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)TriggerMode") {
    field(DESC, "Trigger Mode setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_mode($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)TriggerMode_RBV")
    field(ZRST, "Focus")
    field(ZRVL, "0")
    field(ONST, "Operate")
    field(ONVL, "1")
    field(PINI, "NO")
}

###############################################
#  Extra Visar parameters                     #
###############################################

#########################################
# FocusTimeOver                         #
#########################################

record(longin, "$(P)$(R)FocusTimeOver_RBV") {
    field(DESC, "Focus Over Time getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_focus_time_over($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(longout, "$(P)$(R)FocusTimeOver") {
    field(DESC, "Focus Over Time setter")
    field(DTYP, "stream")
    field(FLNK, "$(P)$(R)FocusTimeOver_RBV")
    field(OUT, "@visar.proto set_focus_time_over($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
}

#########################################
#  Shutter                              #
#########################################

record(mbbi, "$(P)$(R)Shutter_RBV") {
    field(DESC, "Shutter getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_shutter($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Closed")
    field(ZRVL, 0)
    field(ONST, "Open")
    field(ONVL, 1)
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)Shutter") {
    field(DESC, "Shutter setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_shutter($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)Shutter_RBV")
    field(ZRST, "Closed")
    field(ZRVL, 0)
    field(ONST, "Open")
    field(ONVL, 1)
    field(PINI, "NO")
}

#########################################
#  GateMode                             #
#########################################

record(mbbi, "$(P)$(R)GateMode_RBV") {
    field(DESC, "Gate mode getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_gate_mode($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Normal")
    field(ZRVL, 0)
    field(ONST, "Gate")
    field(ONVL, 1)
    field(TWST, "Open Fixed")
    field(TWVL, 2)
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)GateMode") {
    field(DESC, "Gate mode setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_gate_mode($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)GateMode_RBV")
    field(ZRST, "Normal")
    field(ZRVL, 0)
    field(ONST, "Gate")
    field(ONVL, 1)
    field(TWST, "Open Fixed")
    field(TWVL, 2)
    field(PINI, "NO")
}

#########################################
#  TriggerStatus                        #
#########################################

record(mbbi, "$(P)$(R)TriggerStatus_RBV") {
    field(DESC, "Trigger status getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_trigger_status($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Ready")
    field(ZRVL, 0)
    field(ONST, "Fired")
    field(ONVL, 1)
    field(TWST, "Do Reset")
    field(TWVL, 2)
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)TriggerStatus") {
    field(DESC, "Trigger status setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_trigger_status($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)TriggerStatus_RBV")
    field(ZRST, "Ready")
    field(ZRVL, 0)
    field(ONST, "Fired")
    field(ONVL, 1)
    field(TWST, "Do Reset")
    field(TWVL, 2)
    field(PINI, "NO")
}

#########################################
#  Time Range                           #
#########################################

record(mbbi, "$(P)$(R)TimeRange_RBV") {
    field(DESC, "Time Range getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_time_range($(P)$(R)) $(PORTC) 0")
    field(ZRST, "0.5 ns")
    field(ZRVL, 0)
    field(ONST, "1 ns")
    field(ONVL, 1)
    field(TWST, "2 ns")
    field(TWVL, 2)
    field(THST, "5 ns")
    field(THVL, 3)
    field(FRST, "10 ns")
    field(FRVL, 4)
    field(FVST, "20 ns")
    field(FVVL, 5)
    field(SXST, "50 ns")
    field(SXVL, 6)
    field(SVST, "100 ns")
    field(SVVL, 7)
    field(EIST, "200 ns")
    field(EIVL, 8)
    field(NIST, "500 ns")
    field(NIVL, 9)
    field(TEST, "1 us")
    field(TEVL, 10)
    field(ELST, "2 us")
    field(ELVL, 11)
    field(TVST, "5 us")
    field(TVVL, 12)
    field(TTST, "10 us")
    field(TTVL, 13)
    field(FTST, "20 us")
    field(FTVL, 14)
    field(FFST, "50 us")
    field(FFVL, 15)
    field(PINI, "NO")
    field(SCAN, "Passive")
	field(FLNK, "$(P)$(R)ScalingFileRead")
}

record(mbbo, "$(P)$(R)TimeRange") {
    field(DESC, "Time Range setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_time_range($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)TimeRange_RBV")
    field(ZRST, "0.5 ns")
    field(ZRVL, 0)
    field(ONST, "1 ns")
    field(ONVL, 1)
    field(TWST, "2 ns")
    field(TWVL, 2)
    field(THST, "5 ns")
    field(THVL, 3)
    field(FRST, "10 ns")
    field(FRVL, 4)
    field(FVST, "20 ns")
    field(FVVL, 5)
    field(SXST, "50 ns")
    field(SXVL, 6)
    field(SVST, "100 ns")
    field(SVVL, 7)
    field(EIST, "200 ns")
    field(EIVL, 8)
    field(NIST, "500 ns")
    field(NIVL, 9)
    field(TEST, "1 us")
    field(TEVL, 10)
    field(ELST, "2 us")
    field(ELVL, 11)
    field(TVST, "5 us")
    field(TVVL, 12)
    field(TTST, "10 us")
    field(TTVL, 13)
    field(FTST, "20 us")
    field(FTVL, 14)
    field(FFST, "50 us")
    field(FFVL, 15)
    field(PINI, "NO")
}

###############################################
#  #
###############################################

record(bo, "$(P)$(R)PullConfigs") {
    field(DTYP, "Soft Channel" )
    field(FLNK, "$(P)$(R)PullConfigsSeq")
    field(PINI, "YES")
    field(SCAN,"10 second")
    field(DISV,"1")
    field(SDIS,"$(P)$(R)Acquire_RBV PP")

}




record(seq, "$(P)$(R)PullConfigsSeq") {
    field(LNK1, "$(P)$(R)StartAppStream PP")
    field(LNK2, "$(P)$(R)ImageMode_RBV PP")
    field(LNK3, "$(P)$(R)TriggerMode_RBV PP")
    field(LNK4, "$(P)$(R)IIGain_RBV PP")
    field(LNK5, "$(P)$(R)GateMode_RBV PP")
    field(LNK6, "$(P)$(R)TimeRange_RBV PP")
    field(LNK7, "$(P)$(R)Shutter_RBV PP")
    field(LNK8, "$(P)$(R)TriggerStatus_RBV PP")
    field(LNK9, "$(P)$(R)FocusTimeOver_RBV PP")
    field(LNKA, "$(P)$(R)AcquireTimeVisar_RBV PP")

    field(DLY1,"0.1")
    field(DLY2,"0.1")
    field(DLY3,"0.1")
    field(DLY4,"0.1")
    field(DLY5,"0.1")
    field(DLY6,"0.1")
    field(DLY7,"0.1")
    field(DLY8,"0.1")
    field(DLY9,"0.1")
    field(DLYA,"0.1")

    field(SELM, "All")


}





###############################################
#  Visar commands, links to asyn parameters   #
###############################################

#########################################
#  Open Application                     #
#########################################

record(bo, "$(P)$(R)StartAppStream") {
    field(DESC, "Starts Visar application when processed")
    field(DESC, "Start App")
    field(DTYP, "stream")
    field(OUT,  "@visar.proto start_app($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
}

record(longout, "$(P)$(R)StartApp") {
#	field(DESC, "Forces StartAppStream to process")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1)) VC_START_APP")
    field(FLNK, "$(P)$(R)StartAppStream.PROC")
    field(SCAN, "I/O Intr")
}

#########################################
#  Close Application                    #
#########################################

record(bo, "$(P)$(R)StopAppStream") {
    field(DESC, "Stops Visar application when processed")
    field(DTYP, "stream")
    field(OUT,  "@visar.proto stop_app($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
}

record(longout, "$(P)$(R)StopApp") {
#	field(DESC, "Stops Visar application when processed. Forces StopAppStream to process")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1)) VC_STOP_APP")
    field(FLNK, "$(P)$(R)StopAppStream.PROC")
    field(SCAN, "I/O Intr")
}

#########################################
#  Start Acquisition                    #
#########################################

record(bo, "$(P)$(R)StartAcquisitionStream") {
    field(DESC, "Starts acquisition when processed")
    field(DTYP, "stream")
    field(OUT, "@visar.proto start_capture($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
}

record(longout, "$(P)$(R)StartAcquisition") {
#    field(DESC, "Forces StartAcquisitionStream to process")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1)) VC_START_ACQ")
    field(FLNK, "$(P)$(R)StartAcquisitionStream.PROC")
    field(SCAN, "I/O Intr")
}

#########################################
#  Stop Acquisition                    #
#########################################

record(bo, "$(P)$(R)StopAcquisitionStream") {
    field(DESC, "Stops acquisition when processed")
    field(DTYP, "stream")
    field(OUT, "@visar.proto stop_capture($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
}

record(longout, "$(P)$(R)StopAcquisition") {
#    field(DESC, "Forces StopAcquisition to process")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1)) VC_STOP_ACQ")
    field(FLNK, "$(P)$(R)StopAcquisitionStream.PROC")
    field(SCAN, "I/O Intr")
}

#########################################
#  Get Frame                            #
#########################################

record(bo, "$(P)$(R)GetFrameStream") {
    field(DESC, "Ask for the frame data processed")
    field(DTYP, "stream")
    field(OUT, "@visar.proto get_frame($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
}

record(longout, "$(P)$(R)GetFrame") {
#    field(DESC, "Forces GetFrameStream to process")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1)) VC_GET_FRAME")
    field(FLNK, "$(P)$(R)GetFrameStream.PROC")
    field(SCAN, "I/O Intr")
}


####################################################
#  Visar notifications, links to asyn parameters   #
####################################################

#########################################
#  Frame Notification                   #
#########################################

record(longin, "$(P)$(R)BufferNotificationStream") {
    field(DESC, "Frame buffer notification from camera")
    field(DTYP, "stream")
    field(INP,  "@visar.proto buffer_notification($(P)$(R)) $(PORTC) 0")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)$(R)BufferNotificationCalc")
}

record(longout, "$(P)$(R)BufferNotification") {
    field(DESC, "Frame buffer notification to ADDriver")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))VC_FRAME_READY")
}


record(calcout, "$(P)$(R)BufferNotificationCalc") {
    field(DESC, "Forwards frame buffer not. to ADDriver")
    field(INPA, "$(P)$(R)BufferNotificationStream NPP MS")
    field(CALC, "A")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)BufferNotification PP")
    field(PINI, "NO")
}




####################################################
#  Time scaling records                            #
####################################################

#########################################
#  Path to the time scaling file        #
#########################################

record(waveform, "$(P)$(R)ScalingFilePath") {
    field(DESC, "Path to the time scaling file")
    field(FTVL,"CHAR")
    field(NELM,"10000")
}


#########################################
#  SubProcess that reads the file       #
#########################################

record(aSub,"$(P)$(R)ScalingFileRead") {
    field(SNAM,"read_calibration_file_subprocess")
    field(DESC, "Reads the time scale cal file")
    field(FTA, "CHAR")
    field(NOA, "10000")
    field(INPA, "$(P)$(R)ScalingFilePath NPP NMS")
	  field(FTB, "STRING")
    field(NOB, "1")
    field(INPB, "$(P)$(R)TimeRange_RBV NPP NMS")

	  field(FTVA, "DOUBLE")
    field(NOVA, "1344")
    field(OUTA, "$(P)$(R)Scaling_RBV")

    field(FTVB, "DOUBLE")
    field(NOVB, "1")
    field(OUTB, "$(P)$(R)ScaleX_RBV")

    field(FTVC, "CHAR")
    field(NOVC, "5000")
    field(OUTC, "$(P)$(R)ScalingString_RBV")

    #field(PINI, "YES")

   }

#########################################
#  Calibrated time scale                #
#########################################

record(waveform,"$(P)$(R)Scaling_RBV"){
    field(DESC, "Calibrated time scale")
    field(NELM,"1344")
    field(FTVL,"DOUBLE")
    field(PREC,"6")
    field(EGU,"sec")
}

record(ai, "$(P)$(R)ScaleY_RBV") {
    field(DESC, "Y Scaling")
    field(VAL, "1")
}

record(ai, "$(P)$(R)ScaleX_RBV") {
    field(DESC, "X time scale")
    field(VAL, "1")
    field(EGU, "sec/pixel")
}

record(waveform, "$(P)$(R)ScalingString_RBV") {
    field(DESC, "Time scaling file string")
    field(FTVL, "CHAR")
    field(NELM, "5000")
}

####################################################
#  Timing records                                  #
####################################################
#
# TrigToTS_Calc: Calculates expected delay from trigger to timeStamp update
# Inputs: All units in seconds
#	A	- Camera acquire time (exposure length)
#	B	- Camera image transmission time
#	C	- Estimated driver processing delay before requesting timestamp
record( calc, "$(P)$(R)TrigToTS_Calc" )
{
    field( INPA, "$(P)$(R)AcquireTime_RBV CP MS" )
    field( INPB, "$(P)$(R)XmitDelay CP MS" )
    field( INPC, "$(P)$(R)DriverProcDelay CP MS" )
    field( CALC, "A+B+C" )
    field( EGU,  "sec" )
    field( PREC, "5" )
}

record( ao, "$(P)$(R)XmitDelay" )
{
    field( DOL,  "0.5e-6" )
    field( EGU,  "Sec" )
    field( PREC, "3" )
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}

record( ao, "$(P)$(R)DriverProcDelay" )
{
    field( DOL,  "0.5e-6" )
    field( EGU,  "Sec" )
    field( PREC, "3" )
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}

record( ao, "$(P)$(R)BeamEventCode_RBV" )
{
    field( DOL,  "2" )
    field( FLNK, $(P)$(R)BeamEventCodeCalc)

}

record(calcout, "$(P)$(R)BeamEventCodeCalc") {
    field(DESC, "Forwards EVR:$(P)$(R):TRIG0:TEC")
    field(INPA, "$(P)$(R)BeamEventCode_RBV NPP MS")
    field(CALC, "A")
    field(OOPT, "Every Time")
    field(OUT,  "EVR:$(P)$(R)TRIG0:TEC PP")
    field(PINI, "NO")
}
