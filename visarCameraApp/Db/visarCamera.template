##
## visarCamera.template
## Template database file to control the features of a Visar camera.
##

include "ADBase.template"

###############################################
#  Overwrite AreaDetector records             #
###############################################

# Only one data type is supported, unsigned 16 bit integers
record(mbbo, "$(P)$(R)DataType")
{
   field(ZRST, "UInt16")
   field(ZRVL, "3")
   field(ONST, "")
   field(ONVL, "")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

# Only Mono color mode is supported
record(mbbo, "$(P)$(R)ColorMode")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "")
   field(ONVL, "")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

#########################################
#  ADAquireTime                         #
#########################################

record(mbbi, "$(P)$(R)AcquireTimeVisarUnits_RBV") {
    field(DESC, "Exposure time units getter")
    field(ZRST, "us")
    field(ZRVL, "0")
    field(ONST, "ms")
    field(ONVL, "1")
    field(TWST, "s")
    field(TWVL, "2")
    field(THST, "min")
    field(THVL, "3")
    field(PINI, "NO")
}

record(ai, "$(P)$(R)AcquireTimeVisar_RBV") {
    field(DESC, "Visar raw exposure time getter")
    field(DTYP, "stream")
    field(INP,  "@visar.proto get_exposure_time($(P)$(R)) $(PORTC) 0")
    field(SCAN, "Passive")
    field(PINI, "NO")
    field(FLNK, "$(P)$(R)AcquireTimeCalc_RBV")
}

record(calcout, "$(P)$(R)AcquireTimeCalc_RBV") {
    field(DESC, "Exposure time calc")
    field(INPA, "$(P)$(R)AcquireTimeVisar_RBV PP MS")
    field(INPB, "$(P)$(R)AcquireTimeVisarUnits_RBV PP MS")
    field(CALC, "(B==0)? A*0.000001 : (B==1)? A*0.001: (B==2)? A: (B==3)? A*60 : -1")
    field(PREC, "6" )
    field(EGU,  "sec")
    field(OOPT, "Every Time")
    field(OUT,  "$(P)$(R)AcquireTime_RBV PP")
    field(PINI, "NO")
}

record(ao, "$(P)$(R)AcquireTime") {
    field(DESC, "Exposure in sec")
    field(FLNK, "$(P)$(R)AcquireTimeStream")
    field(EGU,  "sec")
    field(PINI, "NO")
}

record(ao, "$(P)$(R)AcquireTimeStream") {
    field(DESC, "Exposure time StreamDevice")
    field(DTYP, "stream")
    field(OUT,  "@visar.proto set_exposure_time_s($(P)$(R)) $(PORTC) 0")
    field(EGU,  "sec")
    field(PINI, "NO")
    field(FLNK, "$(P)$(R)AcquireTimeVisar_RBV.PROC")
}

#########################################
#  ADGain                               #
#########################################

record(ai, "$(P)$(R)Gain_RBV") {
    field(DTYP, "Soft Channel" )
    field(INP,  "$(P)$(R)IIGain_RBV CPP MS")
    field(SCAN, "Passive")
    field(PREC, "0")
    field(PINI, "NO")
}

record(ao, "$(P)$(R)Gain") {
    field(DTYP, "Soft Channel" )
    field(OUT,"$(P)$(R)IIGain PP")
    field(PINI, "NO")
    field(LOPR, "0")
    field(HOPR, "63")
    field(DRVL, "0")
    field(DRVH, "63")
    field(PREC, "0")
}

record(longin, "$(P)$(R)IIGain_RBV") {
    field(DESC, "II-Gain getter")
    field(DTYP, "stream")
    field(INP,  "@visar.proto get_II_gain($(P)$(R)) $(PORTC) 0")
    field(SCAN, "Passive")
    field(FLNK, "$(P)$(R)Gain_RBV")
    field(PINI, "NO")
}

record(longout, "$(P)$(R)IIGain") {
    field(DESC, "II-Gain setter")
    field(DTYP, "stream")
    field(OUT,  "@visar.proto set_II_gain($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)IIGain_RBV")
    field(PINI, "NO")
}

#########################################
#  ADImageMode                          #
#########################################

record(mbbi, "$(P)$(R)ImageMode_RBV") {
    field(DESC, "Trigger mode getter")
    field(DTYP, "stream")
    field(INP,  "@visar.proto get_image_mode($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Continuous")
    field(ONVL, "1")
    field(TWST, "")
    field(TWVL, "")
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)ImageMode") {
    field(DESC, "Trigger mode setter")
    field(DTYP, "stream")
    field(OUT,  "@visar.proto set_image_mode($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)ImageMode_RBV")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Continuous")
    field(ONVL, "1")
    field(TWST, "")
    field(TWVL, "")
    field(PINI, "NO")
}

#########################################
#  ADTriggerMode                        #
#########################################

record(mbbi, "$(P)$(R)TriggerMode_RBV") {
    field(DESC, "Trigger Mode getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_mode($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Focus")
    field(ZRVL, "0")
    field(ONST, "Operate")
    field(ONVL, "1")
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)TriggerMode") {
    field(DESC, "Trigger Mode setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_mode($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)TriggerMode_RBV")
    field(ZRST, "Focus")
    field(ZRVL, "0")
    field(ONST, "Operate")
    field(ONVL, "1")
    field(PINI, "NO")
}

###############################################
#  Extra Visar parameters                     #
###############################################

#########################################
# FocusTimeOver                         #
#########################################

record(longin, "$(P)$(R)FocusTimeOver_RBV") {
    field(DESC, "Focus Over Time getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_focus_time_over($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(longout, "$(P)$(R)FocusTimeOver") {
    field(DESC, "Focus Over Time setter")
    field(DTYP, "stream")
    field(FLNK, "$(P)$(R)FocusTimeOver_RBV PP")
    field(OUT,  "@visar.proto set_focus_time_over($(P)$(R)) $(PORTC) 0")
    field(DRVL, "1")
    field(LOPR, "1")
    field(VAL,  "1")
    field(PINI, "NO")
}

#########################################
#  Shutter                              #
#########################################

record(mbbi, "$(P)$(R)Shutter_RBV") {
    field(DESC, "Shutter getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_shutter($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Closed")
    field(ZRVL, 0)
    field(ONST, "Open")
    field(ONVL, 1)
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)Shutter") {
    field(DESC, "Shutter setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_shutter($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)Shutter_RBV")
    field(ZRST, "Closed")
    field(ZRVL, 0)
    field(ONST, "Open")
    field(ONVL, 1)
    field(PINI, "NO")
}

#########################################
#  GateMode                             #
#########################################

record(mbbi, "$(P)$(R)GateMode_RBV") {
    field(DESC, "Gate mode getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_gate_mode($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Normal")
    field(ZRVL, 0)
    field(ONST, "Gate")
    field(ONVL, 1)
    field(TWST, "Open Fixed")
    field(TWVL, 2)
    field(PINI, "NO")
    field(SCAN, "Passive")
}

record(mbbo, "$(P)$(R)GateMode") {
    field(DESC, "Gate mode setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_gate_mode($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)GateMode_RBV")
    field(ZRST, "Normal")
    field(ZRVL, 0)
    field(ONST, "Gate")
    field(ONVL, 1)
    field(TWST, "Open Fixed")
    field(TWVL, 2)
    field(PINI, "NO")
}

#########################################
#  TriggerStatus                        #
#########################################

record(mbbi, "$(P)$(R)TriggerStatus_RBV") {
    field(DESC, "Trigger status getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_trigger_status($(P)$(R)) $(PORTC) 0")
    field(ZRST, "Ready")
    field(ZRVL, 0)
    field(ONST, "Fired")
    field(ONVL, 1)
    field(TWST, "Do Reset")
    field(TWVL, 2)
    field(PINI, "NO")
    field(SCAN, "1 second")
}

record(mbbo, "$(P)$(R)TriggerStatus") {
    field(DESC, "Trigger status setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_trigger_status($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)TriggerStatus_RBV")
    field(ZRST, "Ready")
    field(ZRVL, 0)
    field(ONST, "Fired")
    field(ONVL, 1)
    field(TWST, "Do Reset")
    field(TWVL, 2)
    field(PINI, "NO")
}

#########################################
#  Time Range                           #
#########################################

record(mbbi, "$(P)$(R)TimeRange_RBV") {
    field(DESC, "Time Range getter")
    field(DTYP, "stream")
    field(INP, "@visar.proto get_time_range($(P)$(R)) $(PORTC) 0")
    field(ZRST, "0.5 ns")
    field(ZRVL, 0)
    field(ONST, "1 ns")
    field(ONVL, 1)
    field(TWST, "2 ns")
    field(TWVL, 2)
    field(THST, "5 ns")
    field(THVL, 3)
    field(FRST, "10 ns")
    field(FRVL, 4)
    field(FVST, "20 ns")
    field(FVVL, 5)
    field(SXST, "50 ns")
    field(SXVL, 6)
    field(SVST, "100 ns")
    field(SVVL, 7)
    field(EIST, "200 ns")
    field(EIVL, 8)
    field(NIST, "500 ns")
    field(NIVL, 9)
    field(TEST, "1 us")
    field(TEVL, 10)
    field(ELST, "2 us")
    field(ELVL, 11)
    field(TVST, "5 us")
    field(TVVL, 12)
    field(TTST, "10 us")
    field(TTVL, 13)
    field(FTST, "20 us")
    field(FTVL, 14)
    field(FFST, "50 us")
    field(FFVL, 15)
    field(PINI, "NO")
    field(SCAN, "Passive")
	field(FLNK, "$(P)$(R)ScalingFileRead")
}

record(mbbo, "$(P)$(R)TimeRange") {
    field(DESC, "Time Range setter")
    field(DTYP, "stream")
    field(OUT, "@visar.proto set_time_range($(P)$(R)) $(PORTC) 0")
    field(FLNK, "$(P)$(R)TimeRange_RBV")
    field(ZRST, "0.5 ns")
    field(ZRVL, 0)
    field(ONST, "1 ns")
    field(ONVL, 1)
    field(TWST, "2 ns")
    field(TWVL, 2)
    field(THST, "5 ns")
    field(THVL, 3)
    field(FRST, "10 ns")
    field(FRVL, 4)
    field(FVST, "20 ns")
    field(FVVL, 5)
    field(SXST, "50 ns")
    field(SXVL, 6)
    field(SVST, "100 ns")
    field(SVVL, 7)
    field(EIST, "200 ns")
    field(EIVL, 8)
    field(NIST, "500 ns")
    field(NIVL, 9)
    field(TEST, "1 us")
    field(TEVL, 10)
    field(ELST, "2 us")
    field(ELVL, 11)
    field(TVST, "5 us")
    field(TVVL, 12)
    field(TTST, "10 us")
    field(TTVL, 13)
    field(FTST, "20 us")
    field(FTVL, 14)
    field(FFST, "50 us")
    field(FFVL, 15)
    field(PINI, "NO")
}

###############################################
#  Visar commands, links to asyn parameters   #
###############################################

#########################################
#  Start Acquisition                    #
#########################################

record(bo, "$(P)$(R)StartAcquisitionStream") {
    field(DESC, "Starts acquisition when processed")
    field(DTYP, "stream")
    field(OUT, "@visar.proto start_capture($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
}

record(longout, "$(P)$(R)StartAcquisition") {
#    field(DESC, "Forces StartAcquisitionStream to process")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1)) VC_START_ACQ")
    field(FLNK, "$(P)$(R)StartAcquisitionStream.PROC")
    field(SCAN, "I/O Intr")
}

#########################################
#  Stop Acquisition                    #
#########################################

record(bo, "$(P)$(R)StopAcquisitionStream") {
    field(DESC, "Stops acquisition when processed")
    field(DTYP, "stream")
    field(OUT, "@visar.proto stop_capture($(P)$(R)) $(PORTC) 0")
    field(PINI, "NO")
}

record(longout, "$(P)$(R)StopAcquisition") {
#    field(DESC, "Forces StopAcquisition to process")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1)) VC_STOP_ACQ")
    field(FLNK, "$(P)$(R)StopAcquisitionStream.PROC")
    field(SCAN, "I/O Intr")
}

####################################################
#  Visar notifications, links to asyn parameters   #
####################################################

#########################################
#  Frame Notification                   #
#########################################

record(longin, "$(P)$(R)BufferNotificationStream") {
    field(DESC, "Frame buffer notification from camera")
    field(DTYP, "stream")
    field(INP,  "@visar.proto buffer_notification($(P)$(R)) $(PORTC) 0")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)$(R)BufferNotification")
}

record(longout, "$(P)$(R)BufferNotification") {
    field(DESC, "Frame buffer notification to ADDriver")
    field(DTYP, "asynInt32")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)BufferNotificationStream NPP")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))VC_FRAME_READY")
}

#########################################
#  Frame Rate Notification              #
#########################################

record(ai, "$(P)$(R)FrameRateNotification") {
    field(DESC, "Frame rate notification from camera ")
    field(DTYP, "stream")
    field(INP, "@visar.proto frame_rate_notification($(P)$(R)) $(PORTC) 0")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)$(R)FrameRateNotificationCalc.PROC")
    field(EGU, "HZ")
}

record(ao, "$(P)$(R)FrameRate") {
    field(DESC, "Frame rate notification to ADDriver")
    field(DTYP, "asynFloat64")
    field(OMSL, "closed_loop")
    field(DOL,  "$(P)$(R)FrameRateNofication NPP")
    field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))VC_FRAME_RATE")
    field(EGU, "HZ")
}

####################################################
#  Time scaling records                            #
####################################################

#########################################
#  Path to the time scaling file        #
#########################################

record(waveform, "$(P)$(R)ScalingFilePath") {
    field(DESC, "Path to the time scaling file")
    field(FTVL,"CHAR")
    field(NELM,"10000")
}

#########################################
#  SubProcess that reads the file       #
#########################################

record(aSub,"$(P)$(R)ScalingFileRead") {
    field(SNAM,"read_calibration_file_subprocess")
    field(DESC, "Reads the time scale cal file")

    field(FTA, "CHAR")
    field(NOA, "10000")
    field(INPA, "$(P)$(R)ScalingFilePath NPP NMS")

    field(FTB, "STRING")
    field(NOB, "1")
    field(INPB, "$(P)$(R)TimeRange_RBV NPP NMS")

    field(FTVA, "DOUBLE")
    field(NOVA, "1344")
    field(OUTA, "$(P)$(R)Scaling_RBV")

    field(FTVB, "DOUBLE")
    field(NOVB, "1")
    field(OUTB, "$(P)$(R)ScaleX_RBV")

    field(FTVC, "CHAR")
    field(NOVC, "5000")
    field(OUTC, "$(P)$(R)ScalingString_RBV")

}
   
#########################################
#  Calibrated time scale                #
#########################################
   
record(waveform,"$(P)$(R)Scaling_RBV"){
    field(DESC, "Calibrated time scale")
    field(DESC,"Time scale")
    field(NELM,"1344")
    field(FTVL,"DOUBLE")
    field(PREC,"6")
    field(EGU,"sec")
}

record(ai, "$(P)$(R)ScaleY_RBV") {
    field(DESC, "Y Scaling")
    field(VAL, "1")
}

record(ai, "$(P)$(R)ScaleX_RBV") {
    field(DESC, "X time scale")
    field(VAL, "1")
    field(EGU, "sec/pixel")
}

record(waveform, "$(P)$(R)ScalingString_RBV") {
    field(DESC, "Time scaling file string")
    field(FTVL, "CHAR")
    field(NELM, "5000")
}


####################################################
#  Timing records                                  #
####################################################
#
# TrigToTS_Calc: Calculates expected delay from trigger to timeStamp update
# Inputs: All units in seconds
#	A	- Camera acquire time (exposure length)
#	B	- Camera image transmission time
#	C	- Estimated driver processing delay before requesting timestamp
record( calc, "$(P)$(R)TrigToTS_Calc" )
{
    field( INPA, "$(P)$(R)AcquireTime_RBV CP MS" )
    field( INPB, "$(P)$(R)XmitDelay CP MS" )
    field( INPC, "$(P)$(R)DriverProcDelay CP MS" )
    field( CALC, "A+B+C" )
    field( EGU,  "sec" )
    field( PREC, "5" )
}

record( ao, "$(P)$(R)XmitDelay" )
{
    field( DOL,  "0.5e-6" )
    field( EGU,  "Sec" )
    field( PREC, "3" )
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}

record( ao, "$(P)$(R)DriverProcDelay" )
{
    field( DOL,  "0.5e-6" )
    field( EGU,  "Sec" )
    field( PREC, "3" )
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}

record( stringin, "$(P)$(R)CamModel" )
{
	field( VAL,   "Visar C7700")
	field( PINI,  "YES" )
}

record( stringin, "$(P)$(R)CamModelScreen" )
{
	field( VAL,   "visarScreens/visarMore.edl" )
	field( PINI,  "YES" )
}

record( stringin, "$(P)$(R)CamType" )
{
	field( VAL,   "Visar C7700" )
	field( PINI,  "YES" )
}

record( stringin, "$(P)$(R)CamTypeScreen" )
{
	field( VAL,   "visarScreens/visarCamType.edl" )
	field( PINI,  "YES" )
}

#
# MCB - OK, I can't pretend to understand this, but the FLNKed
# RBVs don't actually run their protocols at startup time.  So
# let's make one big "fix-the-world" record that we can trigger
# from st.cmd.
# 
record(seq, "$(P)$(R)DoInit") {
        field(SELM, "All")
	field(LNK1, "$(P)$(R)AcquireTime.PROC")
	field(DOL1, "1")    
	field(DLY1, "0.2")

	field(LNK2, "$(P)$(R)FocusTimeOver.PROC")
	field(DOL2, "1")    
	field(DLY2, "0.2")

	field(LNK3, "$(P)$(R)TimeRange.PROC")
	field(DOL3, "1")    
	field(DLY3, "0.2")

	field(LNK4, "$(P)$(R)TriggerMode.PROC")
	field(DOL4, "1")    
	field(DLY4, "0.2")

	field(LNK5, "$(P)$(R)GateMode.PROC")
	field(DOL5, "1")    
	field(DLY5, "0.2")

	field(LNK6, "$(P)$(R)Shutter.PROC")
	field(DOL6, "1")    
	field(DLY6, "0.2")

	field(LNK7, "$(P)$(R)ImageMode.PROC")
	field(DOL7, "1")    
	field(DLY7, "0.2")

	field(LNK8, "$(P)$(R)Gain.PROC")
	field(DOL8, "1")    
	field(DLY8, "0.2")
}
